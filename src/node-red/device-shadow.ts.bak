import * as NR from "node-red";
import { IDeviceShadowManager } from "../device/device.dts";
import { DeviceManager } from "../device/manager";


interface IConfig extends NR.NodeDef {
    
}

interface IInputMsg extends NR.NodeMessageInFlow {
    id?: string   
    action?: string
    type?: string
}

interface IOutputMsg extends IInputMsg {
    id?: string   
    action?: string
    type?: string
}

let NRType = function(RED: any) {
    let node: NR.Node;
    let config: IConfig;
    let manager: IDeviceShadowManager = new DeviceManager();

    function on_south_input(msg: IInputMsg,
        send: (msg: IInputMsg | Array<IInputMsg | IInputMsg[] | null>) => void,
        done: (err?: Error) => void,) {
            manager.events.south.input.emit(msg);
    }

    function on_north_input(msg: IInputMsg,
        send: (msg: IInputMsg | Array<IInputMsg | IInputMsg[] | null>) => void,
        done: (err?: Error) => void,) {
            manager.events.north.input.emit(msg);
    }
    
    function on_config_input(msg: IInputMsg,
        send: (msg: IInputMsg | Array<IInputMsg | IInputMsg[] | null>) => void,
        done: (err?: Error) => void,) {
            manager.events.config.input.emit(msg);
    }   

    function on_notify_input(msg: IInputMsg,
        send: (msg: IInputMsg | Array<IInputMsg | IInputMsg[] | null>) => void,
        done: (err?: Error) => void,) {
            manager.events.notify.input.emit(msg);
    }       

    function on_models_input(msg: IInputMsg,
        send: (msg: IInputMsg | Array<IInputMsg | IInputMsg[] | null>) => void,
        done: (err?: Error) => void,) {
            manager.events.models.input.emit(msg);
    }   

    function on_shadows_input(msg: IInputMsg,
        send: (msg: IInputMsg | Array<IInputMsg | IInputMsg[] | null>) => void,
        done: (err?: Error) => void,) {
            manager.events.shadows.input.emit(msg);
    }   

    function on_south_output(msg: IOutputMsg) {
        node.send([msg, null, null, null, null, null]);            
    }

    function on_north_output(msg: IOutputMsg) {
        node.send([null, msg, null, null, null, null]);
    }
        
    function on_config_output(msg: IOutputMsg) {
        node.send([null, null, msg, null, null, null]);        
    }    

    function on_notify_output(msg: IOutputMsg) {
        node.send([null, null, null, msg, null, null]);
    }       

    function on_models_output(msg: IOutputMsg) {
        node.send([null, null, null, null, msg, null]);
    }
        
    function on_shadows_output(msg: IOutputMsg) {
        node.send([null, null, null, null, null, msg]);        
    }       

    function initNode() {
        RED.nodes.createNode(node, config);
        node.on("input", (msg: IInputMsg, send, done) => {
            if (msg.type == "events") {
                if (msg.action == "south_input")
                    on_south_input(msg, send, done);
                else if (msg.action == "north_input")
                    on_north_input(msg, send, done);
                else if (msg.action == "config_input")
                    on_config_input(msg, send, done);
                else if (msg.action == "notify_input")
                    on_notify_input(msg, send, done);
            } else if (msg.type == "models") {
                on_models_input(msg, send, done);
            } else if (msg.type == "shadows") {
                on_shadows_input(msg, send, done);                                
            }
        })

        node.on("close", () => {
            manager.destroy();
        })

        manager.events.south.output.on(on_south_output);
        manager.events.north.output.on(on_north_output);
        manager.events.config.output.on(on_config_output);
        manager.events.notify.output.on(on_notify_output);
        manager.events.models.output.on(on_models_output);
        manager.events.shadows.output.on(on_shadows_output);
    }

    
    function NDDeviceShadowManager(_config: any)  {
        config = _config;
        node = this as NR.Node; 
        initNode();
    }

    RED.nodes.registerType("nd-device-shadow", NDDeviceShadowManager);

}

eval(`module.export = NRType`)